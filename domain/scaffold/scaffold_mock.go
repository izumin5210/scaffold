// Code generated by MockGen. DO NOT EDIT.
// Source: scaffold.go

package scaffold

import (
	gomock "github.com/golang/mock/gomock"
)

// MockScaffold is a mock of Scaffold interface
type MockScaffold struct {
	ctrl     *gomock.Controller
	recorder *MockScaffoldMockRecorder
}

// MockScaffoldMockRecorder is the mock recorder for MockScaffold
type MockScaffoldMockRecorder struct {
	mock *MockScaffold
}

// NewMockScaffold creates a new mock instance
func NewMockScaffold(ctrl *gomock.Controller) *MockScaffold {
	mock := &MockScaffold{ctrl: ctrl}
	mock.recorder = &MockScaffoldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockScaffold) EXPECT() *MockScaffoldMockRecorder {
	return _m.recorder
}

// Path mocks base method
func (_m *MockScaffold) Path() string {
	ret := _m.ctrl.Call(_m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (_mr *MockScaffoldMockRecorder) Path() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Path")
}

// Name mocks base method
func (_m *MockScaffold) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockScaffoldMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

// Synopsis mocks base method
func (_m *MockScaffold) Synopsis() string {
	ret := _m.ctrl.Call(_m, "Synopsis")
	ret0, _ := ret[0].(string)
	return ret0
}

// Synopsis indicates an expected call of Synopsis
func (_mr *MockScaffoldMockRecorder) Synopsis() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Synopsis")
}

// Help mocks base method
func (_m *MockScaffold) Help() string {
	ret := _m.ctrl.Call(_m, "Help")
	ret0, _ := ret[0].(string)
	return ret0
}

// Help indicates an expected call of Help
func (_mr *MockScaffoldMockRecorder) Help() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Help")
}
