// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

package app

import (
	gomock "github.com/golang/mock/gomock"
	ui "github.com/izumin5210/scaffold/app/ui"
	usecase "github.com/izumin5210/scaffold/app/usecase"
	scaffold "github.com/izumin5210/scaffold/domain/scaffold"
	io "io"
	reflect "reflect"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockContext) EXPECT() *MockContextMockRecorder {
	return _m.recorder
}

// RootPath mocks base method
func (_m *MockContext) RootPath() string {
	ret := _m.ctrl.Call(_m, "RootPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootPath indicates an expected call of RootPath
func (_mr *MockContextMockRecorder) RootPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RootPath", reflect.TypeOf((*MockContext)(nil).RootPath))
}

// TemplatesPath mocks base method
func (_m *MockContext) TemplatesPath() string {
	ret := _m.ctrl.Call(_m, "TemplatesPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// TemplatesPath indicates an expected call of TemplatesPath
func (_mr *MockContextMockRecorder) TemplatesPath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TemplatesPath", reflect.TypeOf((*MockContext)(nil).TemplatesPath))
}

// InReader mocks base method
func (_m *MockContext) InReader() io.Reader {
	ret := _m.ctrl.Call(_m, "InReader")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// InReader indicates an expected call of InReader
func (_mr *MockContextMockRecorder) InReader() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InReader", reflect.TypeOf((*MockContext)(nil).InReader))
}

// OutWriter mocks base method
func (_m *MockContext) OutWriter() io.Writer {
	ret := _m.ctrl.Call(_m, "OutWriter")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// OutWriter indicates an expected call of OutWriter
func (_mr *MockContextMockRecorder) OutWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OutWriter", reflect.TypeOf((*MockContext)(nil).OutWriter))
}

// ErrWriter mocks base method
func (_m *MockContext) ErrWriter() io.Writer {
	ret := _m.ctrl.Call(_m, "ErrWriter")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// ErrWriter indicates an expected call of ErrWriter
func (_mr *MockContextMockRecorder) ErrWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ErrWriter", reflect.TypeOf((*MockContext)(nil).ErrWriter))
}

// Repository mocks base method
func (_m *MockContext) Repository() scaffold.Repository {
	ret := _m.ctrl.Call(_m, "Repository")
	ret0, _ := ret[0].(scaffold.Repository)
	return ret0
}

// Repository indicates an expected call of Repository
func (_mr *MockContextMockRecorder) Repository() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Repository", reflect.TypeOf((*MockContext)(nil).Repository))
}

// UI mocks base method
func (_m *MockContext) UI() ui.UI {
	ret := _m.ctrl.Call(_m, "UI")
	ret0, _ := ret[0].(ui.UI)
	return ret0
}

// UI indicates an expected call of UI
func (_mr *MockContextMockRecorder) UI() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UI", reflect.TypeOf((*MockContext)(nil).UI))
}

// GetScaffoldsUseCase mocks base method
func (_m *MockContext) GetScaffoldsUseCase() usecase.GetScaffoldsUseCase {
	ret := _m.ctrl.Call(_m, "GetScaffoldsUseCase")
	ret0, _ := ret[0].(usecase.GetScaffoldsUseCase)
	return ret0
}

// GetScaffoldsUseCase indicates an expected call of GetScaffoldsUseCase
func (_mr *MockContextMockRecorder) GetScaffoldsUseCase() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetScaffoldsUseCase", reflect.TypeOf((*MockContext)(nil).GetScaffoldsUseCase))
}

// CreateScaffoldUseCase mocks base method
func (_m *MockContext) CreateScaffoldUseCase() usecase.CreateScaffoldUseCase {
	ret := _m.ctrl.Call(_m, "CreateScaffoldUseCase")
	ret0, _ := ret[0].(usecase.CreateScaffoldUseCase)
	return ret0
}

// CreateScaffoldUseCase indicates an expected call of CreateScaffoldUseCase
func (_mr *MockContextMockRecorder) CreateScaffoldUseCase() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateScaffoldUseCase", reflect.TypeOf((*MockContext)(nil).CreateScaffoldUseCase))
}
