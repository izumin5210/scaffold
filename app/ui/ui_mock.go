// Code generated by MockGen. DO NOT EDIT.
// Source: ui.go

package ui

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUI is a mock of UI interface
type MockUI struct {
	ctrl     *gomock.Controller
	recorder *MockUIMockRecorder
}

// MockUIMockRecorder is the mock recorder for MockUI
type MockUIMockRecorder struct {
	mock *MockUI
}

// NewMockUI creates a new mock instance
func NewMockUI(ctrl *gomock.Controller) *MockUI {
	mock := &MockUI{ctrl: ctrl}
	mock.recorder = &MockUIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUI) EXPECT() *MockUIMockRecorder {
	return _m.recorder
}

// Ask mocks base method
func (_m *MockUI) Ask(query string) (string, error) {
	ret := _m.ctrl.Call(_m, "Ask", query)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ask indicates an expected call of Ask
func (_mr *MockUIMockRecorder) Ask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Ask", reflect.TypeOf((*MockUI)(nil).Ask), arg0)
}

// Error mocks base method
func (_m *MockUI) Error(msg string) {
	_m.ctrl.Call(_m, "Error", msg)
}

// Error indicates an expected call of Error
func (_mr *MockUIMockRecorder) Error(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockUI)(nil).Error), arg0)
}

// Status mocks base method
func (_m *MockUI) Status(prefix string, message string, colorAttrs ColorAttrs) {
	_m.ctrl.Call(_m, "Status", prefix, message, colorAttrs)
}

// Status indicates an expected call of Status
func (_mr *MockUIMockRecorder) Status(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Status", reflect.TypeOf((*MockUI)(nil).Status), arg0, arg1, arg2)
}
