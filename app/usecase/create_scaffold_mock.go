// Code generated by MockGen. DO NOT EDIT.
// Source: create_scaffold.go

package usecase

import (
	gomock "github.com/golang/mock/gomock"
	scaffold "github.com/izumin5210/scaffold/domain/scaffold"
	reflect "reflect"
)

// MockCreateScaffoldUseCase is a mock of CreateScaffoldUseCase interface
type MockCreateScaffoldUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateScaffoldUseCaseMockRecorder
}

// MockCreateScaffoldUseCaseMockRecorder is the mock recorder for MockCreateScaffoldUseCase
type MockCreateScaffoldUseCaseMockRecorder struct {
	mock *MockCreateScaffoldUseCase
}

// NewMockCreateScaffoldUseCase creates a new mock instance
func NewMockCreateScaffoldUseCase(ctrl *gomock.Controller) *MockCreateScaffoldUseCase {
	mock := &MockCreateScaffoldUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateScaffoldUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCreateScaffoldUseCase) EXPECT() *MockCreateScaffoldUseCaseMockRecorder {
	return _m.recorder
}

// Perform mocks base method
func (_m *MockCreateScaffoldUseCase) Perform(scff scaffold.Scaffold, rootPath string, name string) error {
	ret := _m.ctrl.Call(_m, "Perform", scff, rootPath, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Perform indicates an expected call of Perform
func (_mr *MockCreateScaffoldUseCaseMockRecorder) Perform(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Perform", reflect.TypeOf((*MockCreateScaffoldUseCase)(nil).Perform), arg0, arg1, arg2)
}
