// Code generated by MockGen. DO NOT EDIT.
// Source: context.go

package core

import (
	gomock "github.com/golang/mock/gomock"
	scaffolds "github.com/izumin5210/scaffold/repo/scaffolds"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockContext) EXPECT() *MockContextMockRecorder {
	return _m.recorder
}

// Path mocks base method
func (_m *MockContext) Path() string {
	ret := _m.ctrl.Call(_m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (_mr *MockContextMockRecorder) Path() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Path")
}

// Repository mocks base method
func (_m *MockContext) Repository() scaffolds.Repository {
	ret := _m.ctrl.Call(_m, "Repository")
	ret0, _ := ret[0].(scaffolds.Repository)
	return ret0
}

// Repository indicates an expected call of Repository
func (_mr *MockContextMockRecorder) Repository() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Repository")
}
