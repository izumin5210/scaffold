package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/izumin5210/scaffold/app"
	"github.com/izumin5210/scaffold/app/cmd"
	"github.com/izumin5210/scaffold/app/usecase"
	"github.com/izumin5210/scaffold/infra/fs"
	"github.com/mitchellh/cli"
)

var (
	// Name is application name
	Name string
	// Version is application version
	Version string
	// Revision describes current commit hash generated by `git describe --always`.
	Revision string
)

func main() {
	ctx := getContext()
	// TODO: Should handle errors
	scffCmds, _ := getScaffoldCommands(ctx)

	c := cli.NewCLI(Name, fmt.Sprintf("%s (%s)", Version, Revision))
	c.Args = os.Args[1:]
	c.Commands = scffCmds

	exitStatus, err := c.Run()
	if err != nil {
		log.Println(err)
	}

	os.Exit(exitStatus)
}

func getContext() app.Context {
	// TODO: Should handle errors
	cw, _ := os.Getwd()
	return app.NewContext(
		os.Stdin,
		os.Stdout,
		os.Stderr,
		cw,
		filepath.Join(cw, ".scaffold"),
		fs.New(),
	)
}

func getScaffoldCommands(ctx app.Context) (cmd.CommandFactories, error) {
	u := usecase.NewGetScaffoldsUseCase(ctx.Repository())
	scaffolds, err := u.Perform()
	if err != nil {
		return nil, err
	}
	return cmd.NewCreateScaffoldCommandFactories(
		ctx.RootPath(),
		ctx.Repository(),
		ctx.UI(),
		scaffolds,
	), nil
}
